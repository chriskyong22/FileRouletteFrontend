// Learn more about what's going on here:
// @link https://moderncss.dev/generating-font-size-css-rules-and-creating-a-fluid-type-scale/

// Select a ratio to preview
// Default is "perfectFourth"
$type-ratios: (
  "minorSecond": 1.067,
  "majorSecond": 1.125,
  "minorThird": 1.2,
  "majorThird": 1.25,
  "perfectFourth": 1.333,
  "augmentedFourth": 1.414,
  "perfectFifth": 1.5,
  "goldenRatio": 1.618
);

@function type-ratio($key) {
  @return map-get($type-ratios, $key);
}

// Recommended
$type-base-size: 1rem;

// Select by key of map, or use a custom value
$type-size-ratio: type-ratio("perfectFourth");

// List in descending order to prevent extra sort function
// Limited to high-touch heading styles
$type-levels: 4, 3, 2, 1;

// Create map with h[x] as key
// and computed font-size as value
$type-styles: ();
$level-size: $type-base-size;
@each $level in $type-levels {
  $level-size: $level-size * $type-size-ratio;
  $type-styles: map-merge($type-styles, (#{"h"}$level: $level-size));

  // Output heading styles
  // Assign to element and create utility class
  h#{$level},
  .h#{$level} {
    // Fallback for browsers that don't support min / max
    font-size: $level-size;

    // Recommendation courtesy of this brilliant work:
    // @link https://kittygiraudel.com/2020/05/18/using-calc-to-figure-out-optimal-line-height/
    line-height: calc(2px + 2ex + 2px);

    // Set with `em` to be relative to current `font-size`
    margin-bottom: 0.65em;

    // Limit in place based on testing -> smaller ratios are
    // prematurely or unnecessarily reduced
    @if ($type-size-ratio > 1.2) {
      // Fluid type styles

      // Remove unit for calculations
      
      $level-unitless: calc($level-size / ($level-size * 0 + 1rem));

      // Set minimum size to a percentage less than $level-size
      // Reduction is greater for large font sizes (> 4rem) to help
      // prevent overflow due to font-size on mobile devices
      $fluid-reduction: if($level-size > 4, 0.5, 0.33);
      $fluid-min: $level-unitless - ($fluid-reduction * $level-unitless);

      // Prevent dropping lower than 1rem (body font-size)
      $fluid-min: if($fluid-min > $type-base-size, $fluid-min, 1);

      // Adjust max modifier slightly per level to prevent "same" size
      // or lower levels appaering larger than higher levels
      // 4vw was selected by testing from $type-ratios map, YMMV ðŸ™ƒ
      $fluid-scaler: ($level-unitless - $fluid-min) + 4vw;

      font-size: clamp(
        #{$fluid-min}rem,
        #{$fluid-scaler} + 1rem,
        #{$level-size}
      );
    }
  }
}

@function type-style($key) {
  @return map-get($type-styles, $key);
}

// Test retrieving heading style value from the map
// @debug "h3:" #{type-style(h3)};

p,
li,
h1,
h2,
h3,
h4 {
  // Help prevent overflow of long words/names/URLs
  word-break: break-word;

  // Optional, not supported for all languages:
  hyphens: auto;

  // Clear top margin
  margin-top: 0;
}

*, *::after, *::before {
  box-sizing: border-box;
}

a {
  text-decoration: none;
  color: currentColor;
}

body {
  // Ensure base applied as default for all other elements
  font-size: $type-base-size;
  font-family: "Merriweather Sans", sans-serif;
  line-height: 1.5;
  min-height: 100vh;
}

.layout {
    min-height: 100vh;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-areas: 
        'header header header header header'
        'main main main main main'
        'footer footer footer footer footer'
    ;
    flex-direction: column;
    background-color: black;

    // colors 
    --primary-text-color: #FFFFFF;
    --red-color: #FF0000;
    --tos-link-color: #6da9b3;
    color: var(--primary-text-color);
}



.site-header {
    grid-area: header;
    padding: 3rem;
}

.main {
    grid-area: main;
    padding: 6rem;
    width: 100%;
    display: grid;
    grid-template-columns: 0.75fr 1fr 1.5fr 0.75fr;
    grid-template-areas: 
        '..... ....... file .....'
        '..... content file .....'
        '..... ....... file .....';
    gap: 1rem;
}

@media screen and (max-width: 1400px) {
    .main {
        grid-template-columns: 0.25fr 1fr 1fr 0.25fr;
        grid-template-areas: 
        '..... ....... file file'
        '..... content file file'
        '..... ....... file file';
    }
}

@media screen and (max-width: 1100px) {
    .main {
        grid-template-columns: 0.25fr 1fr 1fr 0.25fr;
        grid-template-areas: 
        '..... content content .....'
        '..... file file .....'
        '..... file file .....';
    }
}

@media screen and (max-width: 600px) {
    .main {
        grid-template-columns: 1fr;
        grid-template-areas: 
        'content'
        'content'
        'file'
        'file';
    }
    .file-icon-background {
        width: 100%;
        height: 100%;
    }
}

.red-text-color {
    color: var(--red-color);
}

.main-description {
    grid-area: content;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    gap: 1rem;

    article {
        p, h2 {
            padding: 0px;
            margin: 0px;
        }
    }
}

.file-container {
    grid-area: file;
    width: 100%;
    height: 100%;
    background: linear-gradient(180deg, #C4C4C4 0%, rgba(196, 196, 196, 0) 100%, rgba(196, 196, 196, 0) 100%);
    border-radius: 50px 50px 0px 0px;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    justify-content: center;
    align-items: center;

    .file-icon-background {
        width: 65%;
        height: 65%;
        --primary-background-color: #C4C4C4;
        background: var(--primary-background-color);
        border-radius: 50%;
        overflow: hidden;
        border: none;
        cursor: pointer;
        svg {
            width: 100%;
            height: 100%;

            .download-icon {
                fill: var(--red-color);
            }
            text {
                font-size: 3rem;
                fill: var(--red-color);
            }
        }
    }

    .file-icon-background:disabled {
        filter: blur(0.75rem);
        cursor: not-allowed;
    }

    .tos-container {
        display: flex;
        input[type="checkbox"] {
            cursor: pointer;
        }
        a {
            color: var(--tos-link-color);
        }
    }

    .file {
        #rate-section {
            display: flex;
            justify-content: space-evenly;

            button {
                background-color: inherit;
                border: none;
            }

            .negative { 
                color: red;
            }

            .positive {
                color: rgb(52, 219, 52);
            }

            .negative:hover,
            .positive:hover {
                filter: drop-shadow(1px 1px 1px currentColor)
            }

        }
    }


}



.site-footer {
    grid-area: footer;
    margin-top: auto;
    text-align: center;
    padding: 1rem;
    background: radial-gradient(50% 50% at 50% 50%, #FAFAFA 0%, rgba(255, 255, 255, 0.56) 0.01%, rgba(224, 224, 224, 0.492966) 11.98%, rgba(195, 195, 195, 0.428793) 23.44%, rgba(163, 163, 163, 0.358786) 35.94%, rgba(130, 130, 130, 0.285862) 48.96%, rgba(105, 105, 105, 0.23044) 58.85%, rgba(70, 70, 70, 0.154599) 72.4%, rgba(41, 41, 41, 0.0904257) 83.85%, rgba(0, 0, 0, 0) 100%);
    background-blend-mode: lighten;
}